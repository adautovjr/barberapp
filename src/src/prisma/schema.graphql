# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateRequest {
  _avg: RequestAvgAggregate
  _count: RequestCountAggregate
  _max: RequestMaxAggregate
  _min: RequestMinAggregate
  _sum: RequestSumAggregate
}

type AggregateService {
  _avg: ServiceAvgAggregate
  _count: ServiceCountAggregate
  _max: ServiceMaxAggregate
  _min: ServiceMinAggregate
  _sum: ServiceSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyRequest(data: [RequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyService(data: [ServiceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createRequest(data: RequestCreateInput!): Request!
  createService(data: ServiceCreateInput!): Service!
  createUser(data: UserCreateInput!): User!
  deleteManyRequest(where: RequestWhereInput): AffectedRowsOutput!
  deleteManyService(where: ServiceWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyRequest(data: RequestUpdateManyMutationInput!, where: RequestWhereInput): AffectedRowsOutput!
  updateManyService(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateRequest(data: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertRequest(create: RequestCreateInput!, update: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request!
  upsertService(create: ServiceCreateInput!, update: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateRequest(cursor: RequestWhereUniqueInput, orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): AggregateRequest!
  aggregateService(cursor: ServiceWhereUniqueInput, orderBy: [ServiceOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceWhereInput): AggregateService!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstRequest(cursor: RequestWhereUniqueInput, distinct: [RequestScalarFieldEnum!], orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): Request
  findFirstService(cursor: ServiceWhereUniqueInput, distinct: [ServiceScalarFieldEnum!], orderBy: [ServiceOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceWhereInput): Service
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByRequest(by: [RequestScalarFieldEnum!]!, having: RequestScalarWhereWithAggregatesInput, orderBy: [RequestOrderByWithAggregationInput!], skip: Int, take: Int, where: RequestWhereInput): [RequestGroupBy!]!
  groupByService(by: [ServiceScalarFieldEnum!]!, having: ServiceScalarWhereWithAggregatesInput, orderBy: [ServiceOrderByWithAggregationInput!], skip: Int, take: Int, where: ServiceWhereInput): [ServiceGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  request(where: RequestWhereUniqueInput!): Request
  requests(cursor: RequestWhereUniqueInput, distinct: [RequestScalarFieldEnum!], orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): [Request!]!
  service(where: ServiceWhereUniqueInput!): Service
  services(cursor: ServiceWhereUniqueInput, distinct: [ServiceScalarFieldEnum!], orderBy: [ServiceOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceWhereInput): [Service!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Request {
  barber: User!
  barberId: Int!
  client: User!
  clientId: Int!
  createdAt: DateTime!
  date: DateTime!
  id: Int!
  price: Decimal!
  service: Service!
  serviceId: Int!
  updatedAt: DateTime!
}

type RequestAvgAggregate {
  barberId: Float
  clientId: Float
  id: Float
  price: Decimal
  serviceId: Float
}

input RequestAvgOrderByAggregateInput {
  barberId: SortOrder
  clientId: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
}

type RequestCountAggregate {
  _all: Int!
  barberId: Int!
  clientId: Int!
  createdAt: Int!
  date: Int!
  id: Int!
  price: Int!
  serviceId: Int!
  updatedAt: Int!
}

input RequestCountOrderByAggregateInput {
  barberId: SortOrder
  clientId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
  updatedAt: SortOrder
}

input RequestCreateInput {
  barber: UserCreateNestedOneWithoutRequestsAsBarberInput!
  client: UserCreateNestedOneWithoutRequestsAsClientInput!
  createdAt: DateTime
  date: DateTime!
  price: Decimal!
  service: ServiceCreateNestedOneWithoutRequestsInput!
  updatedAt: DateTime
}

input RequestCreateManyBarberInput {
  clientId: Int!
  createdAt: DateTime
  date: DateTime!
  id: Int
  price: Decimal!
  serviceId: Int!
  updatedAt: DateTime
}

input RequestCreateManyBarberInputEnvelope {
  data: [RequestCreateManyBarberInput!]!
  skipDuplicates: Boolean
}

input RequestCreateManyClientInput {
  barberId: Int!
  createdAt: DateTime
  date: DateTime!
  id: Int
  price: Decimal!
  serviceId: Int!
  updatedAt: DateTime
}

input RequestCreateManyClientInputEnvelope {
  data: [RequestCreateManyClientInput!]!
  skipDuplicates: Boolean
}

input RequestCreateManyInput {
  barberId: Int!
  clientId: Int!
  createdAt: DateTime
  date: DateTime!
  id: Int
  price: Decimal!
  serviceId: Int!
  updatedAt: DateTime
}

input RequestCreateManyServiceInput {
  barberId: Int!
  clientId: Int!
  createdAt: DateTime
  date: DateTime!
  id: Int
  price: Decimal!
  updatedAt: DateTime
}

input RequestCreateManyServiceInputEnvelope {
  data: [RequestCreateManyServiceInput!]!
  skipDuplicates: Boolean
}

input RequestCreateNestedManyWithoutBarberInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutBarberInput!]
  create: [RequestCreateWithoutBarberInput!]
  createMany: RequestCreateManyBarberInputEnvelope
}

input RequestCreateNestedManyWithoutClientInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutClientInput!]
  create: [RequestCreateWithoutClientInput!]
  createMany: RequestCreateManyClientInputEnvelope
}

input RequestCreateNestedManyWithoutServiceInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutServiceInput!]
  create: [RequestCreateWithoutServiceInput!]
  createMany: RequestCreateManyServiceInputEnvelope
}

input RequestCreateOrConnectWithoutBarberInput {
  create: RequestCreateWithoutBarberInput!
  where: RequestWhereUniqueInput!
}

input RequestCreateOrConnectWithoutClientInput {
  create: RequestCreateWithoutClientInput!
  where: RequestWhereUniqueInput!
}

input RequestCreateOrConnectWithoutServiceInput {
  create: RequestCreateWithoutServiceInput!
  where: RequestWhereUniqueInput!
}

input RequestCreateWithoutBarberInput {
  client: UserCreateNestedOneWithoutRequestsAsClientInput!
  createdAt: DateTime
  date: DateTime!
  price: Decimal!
  service: ServiceCreateNestedOneWithoutRequestsInput!
  updatedAt: DateTime
}

input RequestCreateWithoutClientInput {
  barber: UserCreateNestedOneWithoutRequestsAsBarberInput!
  createdAt: DateTime
  date: DateTime!
  price: Decimal!
  service: ServiceCreateNestedOneWithoutRequestsInput!
  updatedAt: DateTime
}

input RequestCreateWithoutServiceInput {
  barber: UserCreateNestedOneWithoutRequestsAsBarberInput!
  client: UserCreateNestedOneWithoutRequestsAsClientInput!
  createdAt: DateTime
  date: DateTime!
  price: Decimal!
  updatedAt: DateTime
}

type RequestGroupBy {
  _avg: RequestAvgAggregate
  _count: RequestCountAggregate
  _max: RequestMaxAggregate
  _min: RequestMinAggregate
  _sum: RequestSumAggregate
  barberId: Int!
  clientId: Int!
  createdAt: DateTime!
  date: DateTime!
  id: Int!
  price: Decimal!
  serviceId: Int!
  updatedAt: DateTime!
}

input RequestListRelationFilter {
  every: RequestWhereInput
  none: RequestWhereInput
  some: RequestWhereInput
}

type RequestMaxAggregate {
  barberId: Int
  clientId: Int
  createdAt: DateTime
  date: DateTime
  id: Int
  price: Decimal
  serviceId: Int
  updatedAt: DateTime
}

input RequestMaxOrderByAggregateInput {
  barberId: SortOrder
  clientId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
  updatedAt: SortOrder
}

type RequestMinAggregate {
  barberId: Int
  clientId: Int
  createdAt: DateTime
  date: DateTime
  id: Int
  price: Decimal
  serviceId: Int
  updatedAt: DateTime
}

input RequestMinOrderByAggregateInput {
  barberId: SortOrder
  clientId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
  updatedAt: SortOrder
}

input RequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input RequestOrderByWithAggregationInput {
  _avg: RequestAvgOrderByAggregateInput
  _count: RequestCountOrderByAggregateInput
  _max: RequestMaxOrderByAggregateInput
  _min: RequestMinOrderByAggregateInput
  _sum: RequestSumOrderByAggregateInput
  barberId: SortOrder
  clientId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
  updatedAt: SortOrder
}

input RequestOrderByWithRelationInput {
  barber: UserOrderByWithRelationInput
  barberId: SortOrder
  client: UserOrderByWithRelationInput
  clientId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  price: SortOrder
  service: ServiceOrderByWithRelationInput
  serviceId: SortOrder
  updatedAt: SortOrder
}

enum RequestScalarFieldEnum {
  barberId
  clientId
  createdAt
  date
  id
  price
  serviceId
  updatedAt
}

input RequestScalarWhereInput {
  AND: [RequestScalarWhereInput!]
  NOT: [RequestScalarWhereInput!]
  OR: [RequestScalarWhereInput!]
  barberId: IntFilter
  clientId: IntFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: IntFilter
  price: DecimalFilter
  serviceId: IntFilter
  updatedAt: DateTimeFilter
}

input RequestScalarWhereWithAggregatesInput {
  AND: [RequestScalarWhereWithAggregatesInput!]
  NOT: [RequestScalarWhereWithAggregatesInput!]
  OR: [RequestScalarWhereWithAggregatesInput!]
  barberId: IntWithAggregatesFilter
  clientId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  price: DecimalWithAggregatesFilter
  serviceId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type RequestSumAggregate {
  barberId: Int
  clientId: Int
  id: Int
  price: Decimal
  serviceId: Int
}

input RequestSumOrderByAggregateInput {
  barberId: SortOrder
  clientId: SortOrder
  id: SortOrder
  price: SortOrder
  serviceId: SortOrder
}

input RequestUpdateInput {
  barber: UserUpdateOneRequiredWithoutRequestsAsBarberInput
  client: UserUpdateOneRequiredWithoutRequestsAsClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  service: ServiceUpdateOneRequiredWithoutRequestsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RequestUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RequestUpdateManyWithWhereWithoutBarberInput {
  data: RequestUpdateManyMutationInput!
  where: RequestScalarWhereInput!
}

input RequestUpdateManyWithWhereWithoutClientInput {
  data: RequestUpdateManyMutationInput!
  where: RequestScalarWhereInput!
}

input RequestUpdateManyWithWhereWithoutServiceInput {
  data: RequestUpdateManyMutationInput!
  where: RequestScalarWhereInput!
}

input RequestUpdateManyWithoutBarberInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutBarberInput!]
  create: [RequestCreateWithoutBarberInput!]
  createMany: RequestCreateManyBarberInputEnvelope
  delete: [RequestWhereUniqueInput!]
  deleteMany: [RequestScalarWhereInput!]
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutBarberInput!]
  updateMany: [RequestUpdateManyWithWhereWithoutBarberInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutBarberInput!]
}

input RequestUpdateManyWithoutClientInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutClientInput!]
  create: [RequestCreateWithoutClientInput!]
  createMany: RequestCreateManyClientInputEnvelope
  delete: [RequestWhereUniqueInput!]
  deleteMany: [RequestScalarWhereInput!]
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [RequestUpdateManyWithWhereWithoutClientInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutClientInput!]
}

input RequestUpdateManyWithoutServiceInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutServiceInput!]
  create: [RequestCreateWithoutServiceInput!]
  createMany: RequestCreateManyServiceInputEnvelope
  delete: [RequestWhereUniqueInput!]
  deleteMany: [RequestScalarWhereInput!]
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutServiceInput!]
  updateMany: [RequestUpdateManyWithWhereWithoutServiceInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutServiceInput!]
}

input RequestUpdateWithWhereUniqueWithoutBarberInput {
  data: RequestUpdateWithoutBarberInput!
  where: RequestWhereUniqueInput!
}

input RequestUpdateWithWhereUniqueWithoutClientInput {
  data: RequestUpdateWithoutClientInput!
  where: RequestWhereUniqueInput!
}

input RequestUpdateWithWhereUniqueWithoutServiceInput {
  data: RequestUpdateWithoutServiceInput!
  where: RequestWhereUniqueInput!
}

input RequestUpdateWithoutBarberInput {
  client: UserUpdateOneRequiredWithoutRequestsAsClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  service: ServiceUpdateOneRequiredWithoutRequestsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RequestUpdateWithoutClientInput {
  barber: UserUpdateOneRequiredWithoutRequestsAsBarberInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  service: ServiceUpdateOneRequiredWithoutRequestsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RequestUpdateWithoutServiceInput {
  barber: UserUpdateOneRequiredWithoutRequestsAsBarberInput
  client: UserUpdateOneRequiredWithoutRequestsAsClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RequestUpsertWithWhereUniqueWithoutBarberInput {
  create: RequestCreateWithoutBarberInput!
  update: RequestUpdateWithoutBarberInput!
  where: RequestWhereUniqueInput!
}

input RequestUpsertWithWhereUniqueWithoutClientInput {
  create: RequestCreateWithoutClientInput!
  update: RequestUpdateWithoutClientInput!
  where: RequestWhereUniqueInput!
}

input RequestUpsertWithWhereUniqueWithoutServiceInput {
  create: RequestCreateWithoutServiceInput!
  update: RequestUpdateWithoutServiceInput!
  where: RequestWhereUniqueInput!
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  barber: UserRelationFilter
  barberId: IntFilter
  client: UserRelationFilter
  clientId: IntFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: IntFilter
  price: DecimalFilter
  service: ServiceRelationFilter
  serviceId: IntFilter
  updatedAt: DateTimeFilter
}

input RequestWhereUniqueInput {
  id: Int
}

enum Role {
  ADMIN
  BARBER
  GUEST
}

type Service {
  _count: ServiceCount
  barbers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  createdAt: DateTime!
  duration: Int!
  id: Int!
  name: String!
  price: Decimal!
  requests(cursor: RequestWhereUniqueInput, distinct: [RequestScalarFieldEnum!], orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): [Request!]!
  updatedAt: DateTime!
}

type ServiceAvgAggregate {
  duration: Float
  id: Float
  price: Decimal
}

input ServiceAvgOrderByAggregateInput {
  duration: SortOrder
  id: SortOrder
  price: SortOrder
}

type ServiceCount {
  barbers: Int!
  requests: Int!
}

type ServiceCountAggregate {
  _all: Int!
  createdAt: Int!
  duration: Int!
  id: Int!
  name: Int!
  price: Int!
  updatedAt: Int!
}

input ServiceCountOrderByAggregateInput {
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input ServiceCreateInput {
  barbers: UserCreateNestedManyWithoutServicesInput
  createdAt: DateTime
  duration: Int!
  name: String!
  price: Decimal!
  requests: RequestCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
}

input ServiceCreateManyInput {
  createdAt: DateTime
  duration: Int!
  id: Int
  name: String!
  price: Decimal!
  updatedAt: DateTime
}

input ServiceCreateNestedManyWithoutBarbersInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutBarbersInput!]
  create: [ServiceCreateWithoutBarbersInput!]
}

input ServiceCreateNestedOneWithoutRequestsInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutRequestsInput
  create: ServiceCreateWithoutRequestsInput
}

input ServiceCreateOrConnectWithoutBarbersInput {
  create: ServiceCreateWithoutBarbersInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutRequestsInput {
  create: ServiceCreateWithoutRequestsInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateWithoutBarbersInput {
  createdAt: DateTime
  duration: Int!
  name: String!
  price: Decimal!
  requests: RequestCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
}

input ServiceCreateWithoutRequestsInput {
  barbers: UserCreateNestedManyWithoutServicesInput
  createdAt: DateTime
  duration: Int!
  name: String!
  price: Decimal!
  updatedAt: DateTime
}

type ServiceGroupBy {
  _avg: ServiceAvgAggregate
  _count: ServiceCountAggregate
  _max: ServiceMaxAggregate
  _min: ServiceMinAggregate
  _sum: ServiceSumAggregate
  createdAt: DateTime!
  duration: Int!
  id: Int!
  name: String!
  price: Decimal!
  updatedAt: DateTime!
}

input ServiceListRelationFilter {
  every: ServiceWhereInput
  none: ServiceWhereInput
  some: ServiceWhereInput
}

type ServiceMaxAggregate {
  createdAt: DateTime
  duration: Int
  id: Int
  name: String
  price: Decimal
  updatedAt: DateTime
}

input ServiceMaxOrderByAggregateInput {
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

type ServiceMinAggregate {
  createdAt: DateTime
  duration: Int
  id: Int
  name: String
  price: Decimal
  updatedAt: DateTime
}

input ServiceMinOrderByAggregateInput {
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input ServiceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ServiceOrderByWithAggregationInput {
  _avg: ServiceAvgOrderByAggregateInput
  _count: ServiceCountOrderByAggregateInput
  _max: ServiceMaxOrderByAggregateInput
  _min: ServiceMinOrderByAggregateInput
  _sum: ServiceSumOrderByAggregateInput
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input ServiceOrderByWithRelationInput {
  barbers: UserOrderByRelationAggregateInput
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  requests: RequestOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input ServiceRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

enum ServiceScalarFieldEnum {
  createdAt
  duration
  id
  name
  price
  updatedAt
}

input ServiceScalarWhereInput {
  AND: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  createdAt: DateTimeFilter
  duration: IntFilter
  id: IntFilter
  name: StringFilter
  price: DecimalFilter
  updatedAt: DateTimeFilter
}

input ServiceScalarWhereWithAggregatesInput {
  AND: [ServiceScalarWhereWithAggregatesInput!]
  NOT: [ServiceScalarWhereWithAggregatesInput!]
  OR: [ServiceScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  duration: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  price: DecimalWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ServiceSumAggregate {
  duration: Int
  id: Int
  price: Decimal
}

input ServiceSumOrderByAggregateInput {
  duration: SortOrder
  id: SortOrder
  price: SortOrder
}

input ServiceUpdateInput {
  barbers: UserUpdateManyWithoutServicesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutServiceInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ServiceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ServiceUpdateManyWithWhereWithoutBarbersInput {
  data: ServiceUpdateManyMutationInput!
  where: ServiceScalarWhereInput!
}

input ServiceUpdateManyWithoutBarbersInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutBarbersInput!]
  create: [ServiceCreateWithoutBarbersInput!]
  delete: [ServiceWhereUniqueInput!]
  deleteMany: [ServiceScalarWhereInput!]
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutBarbersInput!]
  updateMany: [ServiceUpdateManyWithWhereWithoutBarbersInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutBarbersInput!]
}

input ServiceUpdateOneRequiredWithoutRequestsInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutRequestsInput
  create: ServiceCreateWithoutRequestsInput
  update: ServiceUpdateWithoutRequestsInput
  upsert: ServiceUpsertWithoutRequestsInput
}

input ServiceUpdateWithWhereUniqueWithoutBarbersInput {
  data: ServiceUpdateWithoutBarbersInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpdateWithoutBarbersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutServiceInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ServiceUpdateWithoutRequestsInput {
  barbers: UserUpdateManyWithoutServicesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ServiceUpsertWithWhereUniqueWithoutBarbersInput {
  create: ServiceCreateWithoutBarbersInput!
  update: ServiceUpdateWithoutBarbersInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpsertWithoutRequestsInput {
  create: ServiceCreateWithoutRequestsInput!
  update: ServiceUpdateWithoutRequestsInput!
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  barbers: UserListRelationFilter
  createdAt: DateTimeFilter
  duration: IntFilter
  id: IntFilter
  name: StringFilter
  price: DecimalFilter
  requests: RequestListRelationFilter
  updatedAt: DateTimeFilter
}

input ServiceWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  createdAt: DateTime!
  email: String
  id: Int!
  name: String!
  phone: String
  requestsAsBarber(cursor: RequestWhereUniqueInput, distinct: [RequestScalarFieldEnum!], orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): [Request!]!
  requestsAsClient(cursor: RequestWhereUniqueInput, distinct: [RequestScalarFieldEnum!], orderBy: [RequestOrderByWithRelationInput!], skip: Int, take: Int, where: RequestWhereInput): [Request!]!
  role: Role!
  services(cursor: ServiceWhereUniqueInput, distinct: [ServiceScalarFieldEnum!], orderBy: [ServiceOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceWhereInput): [Service!]!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  requestsAsBarber: Int!
  requestsAsClient: Int!
  services: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  name: Int!
  phone: Int!
  role: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  name: String!
  phone: String
  requestsAsBarber: RequestCreateNestedManyWithoutBarberInput
  requestsAsClient: RequestCreateNestedManyWithoutClientInput
  role: Role!
  services: ServiceCreateNestedManyWithoutBarbersInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String
  id: Int
  name: String!
  phone: String
  role: Role!
  updatedAt: DateTime
}

input UserCreateNestedManyWithoutServicesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutServicesInput!]
  create: [UserCreateWithoutServicesInput!]
}

input UserCreateNestedOneWithoutRequestsAsBarberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRequestsAsBarberInput
  create: UserCreateWithoutRequestsAsBarberInput
}

input UserCreateNestedOneWithoutRequestsAsClientInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRequestsAsClientInput
  create: UserCreateWithoutRequestsAsClientInput
}

input UserCreateOrConnectWithoutRequestsAsBarberInput {
  create: UserCreateWithoutRequestsAsBarberInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRequestsAsClientInput {
  create: UserCreateWithoutRequestsAsClientInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutServicesInput {
  create: UserCreateWithoutServicesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutRequestsAsBarberInput {
  createdAt: DateTime
  email: String
  name: String!
  phone: String
  requestsAsClient: RequestCreateNestedManyWithoutClientInput
  role: Role!
  services: ServiceCreateNestedManyWithoutBarbersInput
  updatedAt: DateTime
}

input UserCreateWithoutRequestsAsClientInput {
  createdAt: DateTime
  email: String
  name: String!
  phone: String
  requestsAsBarber: RequestCreateNestedManyWithoutBarberInput
  role: Role!
  services: ServiceCreateNestedManyWithoutBarbersInput
  updatedAt: DateTime
}

input UserCreateWithoutServicesInput {
  createdAt: DateTime
  email: String
  name: String!
  phone: String
  requestsAsBarber: RequestCreateNestedManyWithoutBarberInput
  requestsAsClient: RequestCreateNestedManyWithoutClientInput
  role: Role!
  updatedAt: DateTime
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  email: String
  id: Int!
  name: String!
  phone: String
  role: Role!
  updatedAt: DateTime!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: Int
  name: String
  phone: String
  role: Role
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: Int
  name: String
  phone: String
  role: Role
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  phone: SortOrder
  requestsAsBarber: RequestOrderByRelationAggregateInput
  requestsAsClient: RequestOrderByRelationAggregateInput
  role: SortOrder
  services: ServiceOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  phone
  role
  updatedAt
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  id: IntFilter
  name: StringFilter
  phone: StringNullableFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  requestsAsBarber: RequestUpdateManyWithoutBarberInput
  requestsAsClient: RequestUpdateManyWithoutClientInput
  role: EnumRoleFieldUpdateOperationsInput
  services: ServiceUpdateManyWithoutBarbersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutServicesInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutServicesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutServicesInput!]
  create: [UserCreateWithoutServicesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutServicesInput!]
  updateMany: [UserUpdateManyWithWhereWithoutServicesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutServicesInput!]
}

input UserUpdateOneRequiredWithoutRequestsAsBarberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRequestsAsBarberInput
  create: UserCreateWithoutRequestsAsBarberInput
  update: UserUpdateWithoutRequestsAsBarberInput
  upsert: UserUpsertWithoutRequestsAsBarberInput
}

input UserUpdateOneRequiredWithoutRequestsAsClientInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRequestsAsClientInput
  create: UserCreateWithoutRequestsAsClientInput
  update: UserUpdateWithoutRequestsAsClientInput
  upsert: UserUpsertWithoutRequestsAsClientInput
}

input UserUpdateWithWhereUniqueWithoutServicesInput {
  data: UserUpdateWithoutServicesInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutRequestsAsBarberInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  requestsAsClient: RequestUpdateManyWithoutClientInput
  role: EnumRoleFieldUpdateOperationsInput
  services: ServiceUpdateManyWithoutBarbersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutRequestsAsClientInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  requestsAsBarber: RequestUpdateManyWithoutBarberInput
  role: EnumRoleFieldUpdateOperationsInput
  services: ServiceUpdateManyWithoutBarbersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutServicesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  requestsAsBarber: RequestUpdateManyWithoutBarberInput
  requestsAsClient: RequestUpdateManyWithoutClientInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutServicesInput {
  create: UserCreateWithoutServicesInput!
  update: UserUpdateWithoutServicesInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutRequestsAsBarberInput {
  create: UserCreateWithoutRequestsAsBarberInput!
  update: UserUpdateWithoutRequestsAsBarberInput!
}

input UserUpsertWithoutRequestsAsClientInput {
  create: UserCreateWithoutRequestsAsClientInput!
  update: UserUpdateWithoutRequestsAsClientInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  id: IntFilter
  name: StringFilter
  phone: StringNullableFilter
  requestsAsBarber: RequestListRelationFilter
  requestsAsClient: RequestListRelationFilter
  role: EnumRoleFilter
  services: ServiceListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
